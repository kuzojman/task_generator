# -*- coding: utf-8 -*-
"""points_on_bezier_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10HA2F4YW8SH7vbXYE3I0SD0emJfXI0LO
"""

import random
import bezier
import numpy as np
import math
import fractions
from sympy import *
import matplotlib.pyplot as plt
import re
import time


def graph_derivative_function_task_14():
    n_1 = random.randint(20, 30)
    x_start = random.randint(-9, -6)
    x_end = random.randint(2, 17)
    x_arr = sorted(np.random.uniform(x_start, x_end, n_1))
    y_arr = np.random.uniform(-15, 15, n_1)
    nodes1 = np.asfortranarray([[x_start, *x_arr, x_end + 1], [1.0, *y_arr, 1.0]])
    curve1 = bezier.Curve(nodes1, degree=n_1 + 1)
    t_values = np.linspace(0.0, 1, 1000)
    points = curve1.evaluate_multi(t_values)
    numbers = np.random.choice(np.arange(1, len(points[0]), step=110), size=8, replace=False)
    numbers.sort()
    P1, P2, P3, P4, P5, P6, P7, P8 = numbers
    x1 = points[0][P1]
    y1 = points[1][P1]
    x2 = points[0][P2]
    y2 = points[1][P2]
    x3 = points[0][P3]
    y3 = points[1][P3]
    x4 = points[0][P4]
    y4 = points[1][P4]
    x5 = points[0][P5]
    y5 = points[1][P5]
    x6 = points[0][P6]
    y6 = points[1][P6]
    x7 = points[0][P7]
    y7 = points[1][P7]
    x8 = points[0][P8]
    y8 = points[1][P8]
    list_points_y = [y1, y2, y3, y4, y5, y6, y7, y8]
    number = 0
    for i in list_points_y:
        if i > 0:
            number += 1
    ax = curve1.plot(num_pts=2456)
    ax.spines[["left", "bottom"]].set_position('zero')
    ax.spines[["top", "right"]].set_visible(False)
    ax.plot(1, 0, ">k", transform=ax.get_yaxis_transform(), clip_on=False)
    ax.plot(0, 1, "^k", transform=ax.get_xaxis_transform(), clip_on=False)
    arrow_length = 10
    ax.annotate('x', xy=(1, 0), xycoords=('axes fraction', 'data'),
                xytext=(0, arrow_length), textcoords='offset points',
                ha='center', va='bottom')
    ax.annotate('y', xy=(0, 1), xycoords=('data', 'axes fraction'),
                xytext=(arrow_length, 0), textcoords='offset points',
                ha='center', va='bottom')
    plt.axhline(color='black')
    plt.axvline(color='black')
    plt.grid(True, linewidth=0.5, linestyle='dotted')
    plt.axis('equal')
    ax.set_xticks(range(x_start - 9, x_end + 9))
    ax.set_yticks(range(-17, 17))
    ax.set_xticklabels([i if i % 2 == 0 else '' for i in range(x_start - 9, x_end + 9)])
    ax.set_yticklabels([i if i % 2 == 0 else '' for i in range(-17, 17)])
    ax.set_xlim(x_start - 1, x_end + 2)
    ax.set_ylim(min(points[1]) - 1, max(points[1]) + 1)
    plt.scatter(x1, y1, color='red', label='')
    plt.plot([x1, x1], [y1, 0], ':', color='red')
    plt.text(x1, 0, 'x\u2081', ha='center', va='bottom')
    plt.scatter(x2, y2, color='red', label='')
    plt.plot([x2, x2], [y2, 0], ':', color='red')
    plt.text(x2, 0, 'x\u2082', ha='center', va='bottom')
    plt.scatter(x3, y3, color='red', label='')
    plt.plot([x3, x3], [y3, 0], ':', color='red')
    plt.text(x3, 0, 'x\u2083', ha='center', va='bottom')
    plt.scatter(x4, y4, color='red', label='')
    plt.plot([x4, x4], [y4, 0], ':', color='red')
    plt.text(x4, 0, 'x\u2084', ha='center', va='bottom')
    plt.scatter(x5, y5, color='red', label='')
    plt.plot([x5, x5], [y5, 0], ':', color='red')
    plt.text(x5, 0, 'x\u2085', ha='center', va='bottom')
    plt.scatter(x6, y6, color='red', label='')
    plt.plot([x6, x6], [y6, 0], ':', color='red')
    plt.text(x6, 0, 'x\u2086', ha='center', va='bottom')
    plt.scatter(x7, y7, color='red', label='')
    plt.plot([x7, x7], [y7, 0], ':', color='red')
    plt.text(x7, 0, 'x\u2087', ha='center', va='bottom')
    plt.scatter(x8, y8, color='red', label='')
    plt.plot([x8, x8], [y8, 0], ':', color='red')
    plt.text(x8, 0, 'x\u2088', ha='center', va='bottom')
    plt.legend(labels=["y = f'(x)"])
    plt.show()
    task = r'На рисунке изображён график производной функции f(x). На оси абсцисс отмечены восемь точек: x1, x2, x3, ..., x8. Сколько из этих точек лежит на промежутках возрастания функции f(x)?'
    answer = number
    return {
        "condition": task,
        "answer": answer
    }


def graph_function_task_16_task_24():
    n_1 = random.randint(20, 30)
    x_start = random.randint(-9, -6)
    x_end = random.randint(2, 17)
    x_arr = sorted(np.random.uniform(x_start, x_end, n_1))
    y_arr = np.random.uniform(-15, 15, n_1)
    nodes1 = np.asfortranarray([[x_start, *x_arr, x_end + 1], [1.0, *y_arr, 1.0]])
    curve1 = bezier.Curve(nodes1, degree=n_1 + 1)
    t_values = np.linspace(0.0, 1, 1000)
    points = curve1.evaluate_multi(t_values)
    numbers = np.random.choice(np.arange(1, len(points[0]), step=235), size=4, replace=False)
    numbers.sort()
    P1, P2, P3, P4 = numbers
    list_points = [P1, P2, P3, P4]
    x1 = points[0][P1]
    y1 = points[1][P1]
    x2 = points[0][P2]
    y2 = points[1][P2]
    x3 = points[0][P3]
    y3 = points[1][P3]
    x4 = points[0][P4]
    y4 = points[1][P4]
    list_diff_values = []
    for i in list_points:
        k = (points[1][i] - points[1][i - 1]) / (points[0][i] - points[0][i - 1])
        list_diff_values.append(k)
    list_points_x = ['x\u2081', 'x\u2082', 'x\u2083', 'x\u2084']
    dict_diff_values = dict(zip(list_points_x, list_diff_values))
    if random.randint(0, 1) == 0:
        text = r" В какой из этих точек значение производной наименьшее? В ответе укажите эту точку."
        key = min(dict_diff_values, key=dict_diff_values.get)
    else:
        text = r" В какой из этих точек значение производной наибольшее? В ответе укажите эту точку."
        key = max(dict_diff_values, key=dict_diff_values.get)
    ax = curve1.plot(num_pts=2456)
    ax.spines[["left", "bottom"]].set_position('zero')
    ax.spines[["top", "right"]].set_visible(False)
    ax.plot(1, 0, ">k", transform=ax.get_yaxis_transform(), clip_on=False)
    ax.plot(0, 1, "^k", transform=ax.get_xaxis_transform(), clip_on=False)
    arrow_length = 10
    ax.annotate('x', xy=(1, 0), xycoords=('axes fraction', 'data'),
                xytext=(0, arrow_length), textcoords='offset points',
                ha='center', va='bottom')
    ax.annotate('y', xy=(0, 1), xycoords=('data', 'axes fraction'),
                xytext=(arrow_length, 0), textcoords='offset points',
                ha='center', va='bottom')
    plt.axhline(color='black')
    plt.axvline(color='black')
    plt.grid(True, linewidth=0.5, linestyle='dotted')
    plt.axis('equal')
    ax.set_xticks(range(x_start - 9, x_end + 9))
    ax.set_yticks(range(-17, 17))
    ax.set_xticklabels([i if i % 2 == 0 else '' for i in range(x_start - 9, x_end + 9)])
    ax.set_yticklabels([i if i % 2 == 0 else '' for i in range(-17, 17)])
    ax.set_xlim(x_start - 1, x_end + 2)
    ax.set_ylim(min(points[1]) - 1, max(points[1]) + 1)
    plt.scatter(x1, y1, color='red', label='')
    plt.plot([x1, x1], [y1, 0], ':', color='red')
    plt.text(x1, 0, 'x\u2081', ha='center', va='bottom')
    plt.scatter(x2, y2, color='red', label='')
    plt.plot([x2, x2], [y2, 0], ':', color='red')
    plt.text(x2, 0, 'x\u2082', ha='center', va='bottom')
    plt.scatter(x3, y3, color='red', label='')
    plt.plot([x3, x3], [y3, 0], ':', color='red')
    plt.text(x3, 0, 'x\u2083', ha='center', va='bottom')
    plt.scatter(x4, y4, color='red', label='')
    plt.plot([x4, x4], [y4, 0], ':', color='red')
    plt.text(x4, 0, 'x\u2084', ha='center', va='bottom')
    plt.legend(labels=["y = f(x)"])
    plt.show()
    task = r'На рисунке изображен график функции и отмечены точки x1, x2, x3, x4.' + text
    answer = key
    return {
        "condition": task,
        "answer": answer
    }


def graph_function_task_17_task_36():
    n_1 = random.randint(20, 30)
    x_start = random.randint(-9, -6)
    x_end = random.randint(2, 17)
    x_arr = sorted(np.random.uniform(x_start, x_end, n_1))
    y_arr = np.random.uniform(-15, 15, n_1)
    nodes1 = np.asfortranarray([[x_start, *x_arr, x_end + 1], [1.0, *y_arr, 1.0]])
    curve1 = bezier.Curve(nodes1, degree=n_1 + 1)
    t_values = np.linspace(0.0, 1, 1000)
    points = curve1.evaluate_multi(t_values)
    numbers = np.random.choice(np.arange(1, 1000, step=150), size=6, replace=False)
    numbers.sort()
    P1, P2, P3, P4, P5, P6 = numbers
    x1 = points[0][P1]
    y1 = points[1][P1]
    x2 = points[0][P2]
    y2 = points[1][P2]
    x3 = points[0][P3]
    y3 = points[1][P3]
    x4 = points[0][P4]
    y4 = points[1][P4]
    x5 = points[0][P5]
    y5 = points[1][P5]
    x6 = points[0][P6]
    y6 = points[1][P6]
    list_points = [P1, P2, P3, P4, P5, P6]
    list_diff_values = []
    for i in list_points:
        k = (points[1][i] - points[1][i - 1]) / (points[0][i] - points[0][i - 1])
        list_diff_values.append(k)
    if random.randint(0, 1) == 0:
        text = r"На рисунке изображён график дифференцируемой функции y = f(x). На оси абсцисс отмечены шесть точек: x1, x2, x3, ..., x6. Среди этих точек найдите все точки, в которых производная функции f(x) отрицательна. В ответе укажите количество найденных точек."
        negative_numbers = list(filter(lambda x: x < 0, list_diff_values))
        count = len(negative_numbers)
    else:
        text = r"На рисунке изображён график функции y = f(x). На оси абсцисс отмечено шесть точек: x1, x2, x3, x4, x5, x6. Сколько из отмеченных точек принадлежит промежуткам возрастания функции f(x)?"
        positive_numbers = list(filter(lambda x: x > 0, list_diff_values))
        count = len(positive_numbers)
    ax = curve1.plot(num_pts=2456)
    ax.spines[["left", "bottom"]].set_position('zero')
    ax.spines[["top", "right"]].set_visible(False)
    ax.plot(1, 0, ">k", transform=ax.get_yaxis_transform(), clip_on=False)
    ax.plot(0, 1, "^k", transform=ax.get_xaxis_transform(), clip_on=False)
    arrow_length = 10
    ax.annotate('x', xy=(1, 0), xycoords=('axes fraction', 'data'),
                xytext=(0, arrow_length), textcoords='offset points',
                ha='center', va='bottom')
    ax.annotate('y', xy=(0, 1), xycoords=('data', 'axes fraction'),
                xytext=(arrow_length, 0), textcoords='offset points',
                ha='center', va='bottom')
    plt.axhline(color='black')
    plt.axvline(color='black')
    plt.grid(True, linewidth=0.5, linestyle='dotted')
    plt.axis('equal')
    ax.set_xticks(range(x_start - 9, x_end + 9))
    ax.set_yticks(range(-17, 17))
    ax.set_xticklabels([i if i % 2 == 0 else '' for i in range(x_start - 9, x_end + 9)])
    ax.set_yticklabels([i if i % 2 == 0 else '' for i in range(-17, 17)])
    ax.set_xlim(x_start - 1, x_end + 2)
    ax.set_ylim(min(points[1]) - 1, max(points[1]) + 1)
    plt.scatter(x1, y1, color='red', label='')
    plt.plot([x1, x1], [y1, 0], ':', color='red')
    plt.text(x1, 0, 'x\u2081', ha='center', va='bottom')
    plt.scatter(x2, y2, color='red', label='')
    plt.plot([x2, x2], [y2, 0], ':', color='red')
    plt.text(x2, 0, 'x\u2082', ha='center', va='bottom')
    plt.scatter(x3, y3, color='red', label='')
    plt.plot([x3, x3], [y3, 0], ':', color='red')
    plt.text(x3, 0, 'x\u2083', ha='center', va='bottom')
    plt.scatter(x4, y4, color='red', label='')
    plt.plot([x4, x4], [y4, 0], ':', color='red')
    plt.text(x4, 0, 'x\u2084', ha='center', va='bottom')
    plt.scatter(x5, y5, color='red', label='')
    plt.plot([x5, x5], [y5, 0], ':', color='red')
    plt.text(x5, 0, 'x\u2085', ha='center', va='bottom')
    plt.scatter(x6, y6, color='red', label='')
    plt.plot([x6, x6], [y6, 0], ':', color='red')
    plt.text(x6, 0, 'x\u2086', ha='center', va='bottom')
    plt.legend(labels=["y = f(x)"])
    plt.show()
    task = text
    answer = count
    return {
        "condition": task,
        "answer": answer
    }
